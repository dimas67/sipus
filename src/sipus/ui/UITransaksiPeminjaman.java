/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UITransaksiPeminjaman.java
 *
 * Created on Dec 7, 2011, 1:27:47 PM
 */
package sipus.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import sipus.dao.AnggotaDao;
import sipus.dao.BukuDao;
import sipus.dao.TransaksiPeminjamanDao;
import sipus.dao.svc.DaoService;
import sipus.model.Anggota;
import sipus.model.Buku;
import sipus.model.TransaksiPeminjaman;
import sipus.swing.MyTable;
import sipus.table.TableModelAnggota;
import sipus.table.TableModelBuku;
import sipus.table.render.RentTableRenderer;
import sipus.table.render.CurrencyRenderer;
import sipus.table.render.StockTableRenderer;
import sipus.table.render.TextFieldTableCellEditor;
import sipus.util.OptionPane;

/**
 *
 * @author Administrator
 */
public class UITransaksiPeminjaman extends javax.swing.JInternalFrame {

    /** Creates new form UITransaksiPeminjaman */
    private AnggotaDao anggotaDao;
    private BukuDao bukuDao;
    private TransaksiPeminjamanDao peminjamanDao;
    private TableModelAnggota modelAnggota = new TableModelAnggota();
    private TableModelBuku modelBuku = new TableModelBuku();
    private String columnName[] = {"No.", "Kode Buku", "Judul Buku", "Penulis", "Penerbit", "ISBN", "Harga Sewa"};
    private DefaultTableModel modelPeminjaman = new DefaultTableModel(columnName, 1);
    private int columnWidthAnggota[] = {50, 70, 150, 200, 120, 50};
    private int columnWidthPeminjaman[] = {50, 70, 250, 150, 150, 100, 100};
    private int columnWidthBuku[] = {60, 100, 300, 200, 150, 150, 150, 150, 100, 150};
    private MyTable tableAnggota = new MyTable(modelAnggota, columnWidthAnggota);
    private MyTable tableBuku = new MyTable(modelBuku, columnWidthBuku);
    private MyTable tablePeminjaman = new MyTable(modelPeminjaman, columnWidthPeminjaman);
    private MainForm mainForm;
    private Timer timer;
    private int total;
    private String kodeTransaksi;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private UIPeminjaman uIPeminjaman;

    public UITransaksiPeminjaman() {
        initComponents();
        initForm();
        initDialog();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogAnggota = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tNamaAnggota = new javax.swing.JTextField();
        dialogBuku = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        tJudul = new javax.swing.JTextField();
        dialogSimpan = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lTglKembaliSimpan = new javax.swing.JLabel();
        lBukuDipinjamSimpan = new javax.swing.JLabel();
        lnamaSimpan = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tBayar = new javax.swing.JTextField();
        tKembali = new javax.swing.JFormattedTextField();
        bBatalTrx = new javax.swing.JButton();
        bSimpanTrx = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tKodeAnggota = new javax.swing.JTextField();
        lnama = new javax.swing.JLabel();
        tNama = new javax.swing.JLabel();
        lalamat = new javax.swing.JLabel();
        tAlamat = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tglKembali = new com.toedter.calendar.JDateChooser();
        tglPinjam = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        bSimpan = new javax.swing.JButton();
        bBatal = new javax.swing.JButton();
        bHapus = new javax.swing.JButton();

        dialogAnggota.setTitle("Pencarian Anggota");
        dialogAnggota.setModal(true);

        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        dialogAnggota.getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        jLabel2.setText("Nama Anggota");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(tNamaAnggota, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tNamaAnggota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogAnggota.getContentPane().add(jPanel5, java.awt.BorderLayout.PAGE_START);

        dialogBuku.setTitle("Pencarian Buku");
        dialogBuku.setModal(true);

        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        dialogBuku.getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        jLabel3.setText("Judul Buku");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(tJudul, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tJudul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogBuku.getContentPane().add(jPanel7, java.awt.BorderLayout.PAGE_START);

        dialogSimpan.setTitle("Pembayaran");
        dialogSimpan.setModal(true);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel5.setText("Buku Dipinjam");

        jLabel4.setText("Nama");

        jLabel8.setText("Tgl. Kembali");

        lTglKembaliSimpan.setFont(new java.awt.Font("Tahoma", 1, 11));
        lTglKembaliSimpan.setText("tglKembali");

        lBukuDipinjamSimpan.setFont(new java.awt.Font("Tahoma", 1, 11));
        lBukuDipinjamSimpan.setText("bukuDipinjam");

        lnamaSimpan.setFont(new java.awt.Font("Tahoma", 1, 11));
        lnamaSimpan.setText("nama");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTglKembaliSimpan)
                    .addComponent(lnamaSimpan)
                    .addComponent(lBukuDipinjamSimpan))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lnamaSimpan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lBukuDipinjamSimpan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lTglKembaliSimpan))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogSimpan.getContentPane().add(jPanel8, java.awt.BorderLayout.CENTER);

        jLabel9.setText("Bayar             ");

        jLabel10.setText("Kembali");

        tBayar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tBayarKeyPressed(evt);
            }
        });

        bBatalTrx.setText("Batal");
        bBatalTrx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBatalTrxActionPerformed(evt);
            }
        });

        bSimpanTrx.setText("Simpan");
        bSimpanTrx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSimpanTrxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(bSimpanTrx)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bBatalTrx))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tKembali, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                            .addComponent(tBayar, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tBayar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tKembali, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBatalTrx)
                    .addComponent(bSimpanTrx))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogSimpan.getContentPane().add(jPanel9, java.awt.BorderLayout.PAGE_END);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Transaksi Peminjaman");

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Kode Anggota");

        tKodeAnggota.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tKodeAnggotaKeyPressed(evt);
            }
        });

        lnama.setText("Nama :");

        tNama.setFont(new java.awt.Font("Tahoma", 1, 11));
        tNama.setText("nama");

        lalamat.setText("Alamat :");

        tAlamat.setFont(new java.awt.Font("Tahoma", 1, 11));
        tAlamat.setText("alamat");

        jLabel6.setText("Tgl. Kembali");

        jLabel7.setText("Tgl. Pinjam");

        tglKembali.setDateFormatString("dd MMMM yyyy");

        tglPinjam.setDateFormatString("dd MMMM yyyy");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tKodeAnggota, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lnama)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tNama)
                .addGap(18, 18, 18)
                .addComponent(lalamat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tAlamat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tglPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tglKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tglPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(tKodeAnggota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lnama)
                                .addComponent(tNama)
                                .addComponent(lalamat)
                                .addComponent(tAlamat)
                                .addComponent(jLabel7))))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tglKembali, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        bSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sipus/icon/save.png"))); // NOI18N
        bSimpan.setText("Simpan");
        bSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSimpanActionPerformed(evt);
            }
        });

        bBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sipus/icon/cancel.png"))); // NOI18N
        bBatal.setText("Batal");

        bHapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sipus/icon/delete.png"))); // NOI18N
        bHapus.setText("Hapus");
        bHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHapusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bSimpan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bBatal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bHapus)
                .addContainerGap(663, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSimpan)
                    .addComponent(bBatal)
                    .addComponent(bHapus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tKodeAnggotaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tKodeAnggotaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            Anggota anggota = anggotaDao.getAnggota(tKodeAnggota.getText());
            if (anggota.getNama() == null) {
                hiddenInfo(true);
                dialogAnggota.setVisible(true);
            } else {
                if (anggota.getStatus() == 1) {
                    OptionPane.showWarningMessage("Anggota masih meminjam buku");
                } else {
                    hiddenInfo(false);
                    tNama.setText(anggota.getNama());
                    tAlamat.setText(anggota.getAlamat());
                    tablePeminjaman.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_tKodeAnggotaKeyPressed

    private void bSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSimpanActionPerformed
        // TODO add your handling code here:
        showSimpanDialog();
    }//GEN-LAST:event_bSimpanActionPerformed

    private void tBayarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tBayarKeyPressed
        // TODO add your handling code here:
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                if (tKembali.getText().length() == 0) {
                    int totalBayar = mainForm.getTotal();
                    int bayar = Integer.parseInt(tBayar.getText());
                    int kembali = bayar - totalBayar;
                    if (kembali < 0) {
                        OptionPane.showWarningMessage("Uang yang dibayarkan kurang");
                    } else {
                        tKembali.setValue(kembali);
                    }
                    total = 0;
                } else {
                    simpanTransaksi();
                }
            }
        } catch (NumberFormatException ex) {
            OptionPane.showErrorMessage(ex);
        }
    }//GEN-LAST:event_tBayarKeyPressed

    private void bBatalTrxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBatalTrxActionPerformed
        // TODO add your handling code here:
        dialogSimpan.dispose();
    }//GEN-LAST:event_bBatalTrxActionPerformed

    private void bSimpanTrxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSimpanTrxActionPerformed
        // TODO add your handling code here:
        simpanTransaksi();
    }//GEN-LAST:event_bSimpanTrxActionPerformed

    private void bHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHapusActionPerformed
        // TODO add your handling code here:
        try {
            if (tablePeminjaman.getRowCount() < 0) {
                OptionPane.showWarningMessage("Silakan pilih data yang akan dihapus");
            } else {
                if (!modelPeminjaman.getValueAt(tablePeminjaman.getSelectedRow(), 1).equals("") && tablePeminjaman.getRowCount() > 1) {
                    if (OptionPane.showConfirmMessage("Yakin hapus buku?") == JOptionPane.YES_OPTION) {
                        int hargaSewa = Integer.parseInt(modelPeminjaman.getValueAt(tablePeminjaman.getSelectedRow(), 6).toString());
                        total = total - hargaSewa;
                        mainForm.setTotal(total);
                        modelPeminjaman.removeRow(tablePeminjaman.getSelectedRow());
                    }
                }
            }
        } catch (NullPointerException ex) {
            OptionPane.showErrorMessage("Data tidak bisa dihapus : \n" + ex);
        }
    }//GEN-LAST:event_bHapusActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBatal;
    private javax.swing.JButton bBatalTrx;
    private javax.swing.JButton bHapus;
    private javax.swing.JButton bSimpan;
    private javax.swing.JButton bSimpanTrx;
    private javax.swing.JDialog dialogAnggota;
    private javax.swing.JDialog dialogBuku;
    private javax.swing.JDialog dialogSimpan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lBukuDipinjamSimpan;
    private javax.swing.JLabel lTglKembaliSimpan;
    private javax.swing.JLabel lalamat;
    private javax.swing.JLabel lnama;
    private javax.swing.JLabel lnamaSimpan;
    private javax.swing.JLabel tAlamat;
    private javax.swing.JTextField tBayar;
    private javax.swing.JTextField tJudul;
    private javax.swing.JFormattedTextField tKembali;
    private javax.swing.JTextField tKodeAnggota;
    private javax.swing.JLabel tNama;
    private javax.swing.JTextField tNamaAnggota;
    private com.toedter.calendar.JDateChooser tglKembali;
    private com.toedter.calendar.JDateChooser tglPinjam;
    // End of variables declaration//GEN-END:variables

    private void initForm() {
        anggotaDao = DaoService.getAnggotaDao();
        bukuDao = DaoService.getBukuDao();
        peminjamanDao = DaoService.getTransaksiPeminjamanDao();
        kodeTransaksi = peminjamanDao.getGeneratedKodeTransaksi();

        setTitle(getTitle() + " > " + kodeTransaksi);

        tablePeminjaman.getColumnModel().getColumn(1).setCellEditor(new TextFieldTableCellEditor(this));
        tablePeminjaman.getColumnModel().getColumn(6).setCellRenderer(new CurrencyRenderer());

        tablePeminjaman.setRowHeight(20);

        jScrollPane1.setViewportView(tablePeminjaman);
        jScrollPane2.setViewportView(tableAnggota);
        jScrollPane3.setViewportView(tableBuku);

        tglPinjam.setDate(new Date());
        hiddenInfo(true);

        tableAnggota.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() > 1) {
                    Anggota anggota = anggotaDao.getAnggota(modelAnggota.getValueAt(tableAnggota.getSelectedRow(), 1).toString());
                    if (anggota.getStatus() == 1) {
                        OptionPane.showWarningMessage("Anggota masih meminjam buku");
                    } else {
                        tKodeAnggota.setText(modelAnggota.getValueAt(tableAnggota.getSelectedRow(), 1).toString());
                        tNama.setText(modelAnggota.getValueAt(tableAnggota.getSelectedRow(), 2).toString());
                        tAlamat.setText(modelAnggota.getValueAt(tableAnggota.getSelectedRow(), 3).toString());
                        hiddenInfo(false);
                        dialogAnggota.dispose();
                    }
                }
            }
        });
        tableBuku.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() > 1) {

                    String kode = modelBuku.getValueAt(tableBuku.getSelectedRow(), 1).toString();
                    String judul = modelBuku.getValueAt(tableBuku.getSelectedRow(), 2).toString();
                    String penulis = modelBuku.getValueAt(tableBuku.getSelectedRow(), 3).toString();
                    String penerbit = modelBuku.getValueAt(tableBuku.getSelectedRow(), 4).toString();
                    String isbn = modelBuku.getValueAt(tableBuku.getSelectedRow(), 6).toString();
                    String hargaSewa = modelBuku.getValueAt(tableBuku.getSelectedRow(), 7).toString();
                    int stok = Integer.parseInt(modelBuku.getValueAt(tableBuku.getSelectedRow(), 8).toString());

                    if (stok <= 0) {
                        OptionPane.showWarningMessage("Stok buku sudah habis");
                    } else {
                        modelPeminjaman.setValueAt(kode, tablePeminjaman.getSelectedRow(), 1);
                        modelPeminjaman.setValueAt(judul, tablePeminjaman.getSelectedRow(), 2);
                        modelPeminjaman.setValueAt(penulis, tablePeminjaman.getSelectedRow(), 3);
                        modelPeminjaman.setValueAt(penerbit, tablePeminjaman.getSelectedRow(), 4);
                        modelPeminjaman.setValueAt(isbn, tablePeminjaman.getSelectedRow(), 5);
                        modelPeminjaman.setValueAt(hargaSewa, tablePeminjaman.getSelectedRow(), 6);

                        countTotal(tablePeminjaman.getRowCount() - 1);
                        String kosong[] = {"", "", "", "", "", "", "", ""};
                        modelPeminjaman.addRow(kosong);
                        dialogBuku.dispose();
                        timer.start();
                    }
                }
            }
        });

        timer = new Timer(100, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String kode = modelBuku.getValueAt(tableBuku.getSelectedRow(), 1).toString();
                modelPeminjaman.setValueAt(kode, (tablePeminjaman.getSelectedRow() - 1), 1);
                timer.stop();
            }
        });
    }

    public void setUIPeminjaman(UIPeminjaman uIPeminjaman) {
        this.uIPeminjaman = uIPeminjaman;
    }

    private void reloadUIPeminjaman() {
//        uIPeminjaman.reload();
    }

    private void initDialog() {
        tableBuku.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tableAnggota.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        dialogAnggota.pack();
        dialogSimpan.pack();
        dialogBuku.setSize(700, 400);
        dialogAnggota.setLocationRelativeTo(null);
        dialogBuku.setLocationRelativeTo(null);
        dialogSimpan.setLocationRelativeTo(null);

        tNamaAnggota.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                cariAnggota(tNamaAnggota.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                cariAnggota(tNamaAnggota.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                cariAnggota(tNamaAnggota.getText());
            }

            private void cariAnggota(String nama) {
                for (int i = tableAnggota.getRowCount() - 1; i >= 0; i--) {
                    modelAnggota.delete(i);
                }
                List<Anggota> list = anggotaDao.getAll(nama);
                for (Anggota anggota : list) {
                    anggota.setKode(anggota.getKode());
                    anggota.setNama(anggota.getNama());
                    anggota.setAlamat(anggota.getAlamat());
                    anggota.setNoTelp(anggota.getNoTelp());
                    modelAnggota.insert(anggota);
                }
            }
        });

        reloadAnggota();

        tJudul.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                cariBuku(tJudul.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                cariBuku(tJudul.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                cariBuku(tJudul.getText());
            }

            private void cariBuku(String judul) {
                for (int i = tableBuku.getRowCount() - 1; i >= 0; i--) {
                    modelBuku.delete(i);
                }
                List<Buku> list = bukuDao.getAll(judul);
                for (Buku buku : list) {
                    buku.setKode(buku.getKode());
                    buku.setJudul(buku.getJudul());
                    buku.setPenerbit(buku.getPenerbit());
                    buku.setPenulis(buku.getPenulis());
                    buku.setKategori(buku.getKategori());
                    buku.setIsbn(buku.getIsbn());
                    buku.setHargaSewa(buku.getHargaSewa());
                    buku.setDenda(buku.getDenda());
                    modelBuku.insert(buku);
                }
            }
        });
        reloadBuku();
        initTableCellRenderer();
    }

    private void hiddenInfo(boolean b) {
        lnama.setVisible(!b);
        tNama.setVisible(!b);
        lalamat.setVisible(!b);
        tAlamat.setVisible(!b);
    }

    private void reloadAnggota() {
        for (int i = tableAnggota.getRowCount() - 1; i >= 0; i--) {
            modelAnggota.delete(i);
        }
        List<Anggota> list = anggotaDao.getAll();
        for (Anggota anggota : list) {
            anggota.setKode(anggota.getKode());
            anggota.setNama(anggota.getNama());
            anggota.setAlamat(anggota.getAlamat());
            anggota.setNoTelp(anggota.getNoTelp());
            modelAnggota.insert(anggota);
        }
    }

    private void reloadBuku() {
        for (int i = tableBuku.getRowCount() - 1; i >= 0; i--) {
            modelBuku.delete(i);
        }
        List<Buku> list = bukuDao.getAll();
        for (Buku buku : list) {
            buku.setKode(buku.getKode());
            buku.setJudul(buku.getJudul());
            buku.setPenerbit(buku.getPenerbit());
            buku.setPenulis(buku.getPenulis());
            buku.setKategori(buku.getKategori());
            buku.setIsbn(buku.getIsbn());
            buku.setHargaSewa(buku.getHargaSewa());
            buku.setDenda(buku.getDenda());
            modelBuku.insert(buku);
        }
    }

    public void showBuku(Buku buku) {
        if (buku.getJudul() != null) {
            if (buku.getStok() <= 0) {
                OptionPane.showWarningMessage("Stok buku sudah habis");
            } else {
                modelPeminjaman.setValueAt(buku.getJudul(), tablePeminjaman.getSelectedRow(), 2);
                modelPeminjaman.setValueAt(buku.getPenulis(), tablePeminjaman.getSelectedRow(), 3);
                modelPeminjaman.setValueAt(buku.getPenerbit(), tablePeminjaman.getSelectedRow(), 4);
                modelPeminjaman.setValueAt(buku.getIsbn(), tablePeminjaman.getSelectedRow(), 5);
                modelPeminjaman.setValueAt(buku.getHargaSewa(), tablePeminjaman.getSelectedRow(), 6);
                countTotal(tablePeminjaman.getRowCount() - 1);
                String data[] = {"", "", "", "", "", "", "", ""};
                modelPeminjaman.addRow(data);
            }
        } else {
            reloadBuku();
            dialogBuku.setVisible(true);
        }
    }

    public void countTotal(int row) {
        int hargaSewa = Integer.parseInt(modelPeminjaman.getValueAt(row, 6).toString());
        total = total + hargaSewa;
        mainForm.setTotal(total);
    }

    public void setMainForm(MainForm mainForm) {
        this.mainForm = mainForm;
    }

    private void showSimpanDialog() {
        if (tglKembali.getDate() == null) {
            OptionPane.showWarningMessage("Silakan isikan tanggal kembali");
        } else if (!tNama.isVisible()) {
            OptionPane.showWarningMessage("Silakan isikan kode Anggota");
        } else {
            lnamaSimpan.setText(tNama.getText());
            lTglKembaliSimpan.setText(dateFormat.format(tglKembali.getDate()));
            lBukuDipinjamSimpan.setText(String.valueOf(tablePeminjaman.getRowCount() - 1));
            tBayar.requestFocus();
            dialogSimpan.setVisible(true);
        }
    }

    private void clearForm() {
        hiddenInfo(true);
        tKodeAnggota.setText("");
        for (int i = tablePeminjaman.getRowCount() - 1; i >= 0; i--) {
            modelPeminjaman.removeRow(i);
        }
        String data[] = {"", "", "", "", "", "", "", ""};
        modelPeminjaman.addRow(data);
        kodeTransaksi = peminjamanDao.getGeneratedKodeTransaksi();
        setTitle(getTitle().substring(0, getTitle().length() - 6) + " > " + kodeTransaksi);
    }

    private void simpanTransaksi() {
        TransaksiPeminjaman peminjaman = new TransaksiPeminjaman();
        peminjaman.setKodeTransaksi(kodeTransaksi);
        peminjaman.setKodeAnggota(tKodeAnggota.getText());

        String tanggalPinjam = dateFormat.format(tglPinjam.getDate());
        int year = Integer.parseInt(tanggalPinjam.substring(0, 4));
        int month = Integer.parseInt(tanggalPinjam.substring(5, 7));
        int day = Integer.parseInt(tanggalPinjam.substring(8, 10));

        String tanggalKembali = dateFormat.format(tglKembali.getDate());
        int yearK = Integer.parseInt(tanggalKembali.substring(0, 4));
        int monthK = Integer.parseInt(tanggalKembali.substring(5, 7));
        int dayK = Integer.parseInt(tanggalKembali.substring(8, 10));

        java.sql.Date datePinjam = java.sql.Date.valueOf(year + "-" + month + "-" + day);
        java.sql.Date dateKembali = java.sql.Date.valueOf(yearK + "-" + monthK + "-" + dayK);

        peminjaman.setTglPinjam(datePinjam);
        peminjaman.setTglKembali(dateKembali);
        peminjaman.setTotal(mainForm.getTotal());
        peminjamanDao.insertMasterPeminjaman(peminjaman);
        if (peminjamanDao.isSuccess()) {
            Anggota anggota = new Anggota();
            anggota.setStatus(1);
            anggota.setKode(tKodeAnggota.getText());
            anggotaDao.updateStatus(anggota);

            if (anggotaDao.isSuccess()) {


                for (int i = 0; i < tablePeminjaman.getRowCount() - 1; i++) {
                    String kodeBuku = modelPeminjaman.getValueAt(i, 1).toString();
                    Buku buku = bukuDao.getBuku(kodeBuku);

                    buku.setStok(buku.getStok() - 1);
                    buku.setKode(kodeBuku);
                    bukuDao.updateStok(buku);

                    peminjaman.setKodeBuku(kodeBuku);
                    peminjaman.setKodeTransaksi(kodeTransaksi);
                    peminjamanDao.insertDetailPeminjaman(peminjaman);
                }
                if (peminjamanDao.isSuccess()) {
                    OptionPane.showMessage("Data peminjaman berhasil disimpan");
                    dialogSimpan.dispose();
                    tBayar.setText("");
                    tKembali.setText("");
                    clearForm();
                    reloadUIPeminjaman();
                    mainForm.reloadUIPengembalian();
                    total = 0;
                    mainForm.setTotal(total);
                }
            }
        } else {
            peminjamanDao.rollBack();
        }
    }

    private void initTableCellRenderer() {
        for (int i = 1; i < tableAnggota.getColumnCount(); i++) {
            tableAnggota.getColumnModel().getColumn(i).setCellRenderer(new RentTableRenderer());
        }

        for (int i = 1; i < tableBuku.getColumnCount(); i++) {
            tableBuku.getColumnModel().getColumn(i).setCellRenderer(new StockTableRenderer());
        }
    }
}
